I"v<p><strong>리스트</strong> 는 이전 시간에 포스팅한 배열과 개념이 비슷하다.</p>

<p>다만 리스트는 배열과 달리 <strong>가변적인 길이</strong> 를 가질 수 있다는 것이다.</p>

<p>리스트가  종요한 자료형인 이유는 나중에 배울 스택, 큐, 트리, 그래프와 같은 다른 자료형들을 구현하는 기본이 된다는 점이다.</p>

<p>배열처럼 자료를 순서대로 저장하는 구조이기 때문에 배열에서 설명한 것은 생략한다.</p>

<p>리스트를 구현하는 방법은 2가지가 있는데 하나는 배열을 이용하는 방법과 다른 하나는 배열을 이용하지 않는 방법이다.</p>

<p>리스트에슨 기본적 다음과 같은 기능이 필요하다.</p>

<ul>
  <li>리스트 생성 (<code class="language-plaintext highlighter-rouge">list_create</code>)</li>
  <li>리스트 제거 (<code class="language-plaintext highlighter-rouge">list_destroy</code>)</li>
  <li>리스트 초기화 (<code class="language-plaintext highlighter-rouge">list_clear</code>)</li>
  <li>리스트 원소 삽입 (<code class="language-plaintext highlighter-rouge">insert_list_element</code>)</li>
  <li>리스트 맨 뒤에 원소 추가 (<code class="language-plaintext highlighter-rouge">append_list</code>)</li>
  <li>리스트 원소 제거 (<code class="language-plaintext highlighter-rouge">remove_list_element</code>)</li>
  <li>리스트 원소 개수 (<code class="language-plaintext highlighter-rouge">num_list_element</code>)</li>
  <li>특정 위치의 리스트 (<code class="language-plaintext highlighter-rouge">get_list_element_at</code>)</li>
  <li>리스트에 할당된 메모리의 양 (<code class="language-plaintext highlighter-rouge">get_list_capacity</code>)</li>
  <li>현재 할당된 메모리의 양을 다 사용했는가 (<code class="language-plaintext highlighter-rouge">is_list_full</code>)</li>
  <li>리스트의 크기 재설정 (<code class="language-plaintext highlighter-rouge">resize_list</code>)</li>
</ul>

<p>오늘 포스팅에서 정리할 내용은 배열을 이용하는 방법을 통한 구현이다.</p>

<p>배열을 이용한 방법은 그렇지 않은 것과 다르게 <strong>메모리상의 물리적인 순서가 논리적으로 생각하는 순서</strong> 와 같다는 점이 특징이다.</p>

<p>따라서 상당히 직관적 구현 가능하다.</p>

<p>구현을 위해 <code class="language-plaintext highlighter-rouge">C</code>의 <code class="language-plaintext highlighter-rouge">구조체</code>를 이용해 리스트를 감싸서 선언하고 이에 해당하는 함수들을 구성하겟다.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// arraylist.c</span>

<span class="cp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdbool.h&gt;
</span>
<span class="k">typedef</span> <span class="kt">int</span> <span class="n">elem_t</span><span class="p">;</span> <span class="c1">// 배열 원소의 데이터 타입</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">ArrayList_s</span> <span class="p">{</span>
    <span class="n">elem_t</span><span class="o">*</span> <span class="n">elements</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">capa</span><span class="p">;</span> <span class="c1">// pre-allocated memory</span>
    <span class="kt">int</span> <span class="n">used</span><span class="p">;</span> <span class="c1">// memory used</span>
<span class="p">}</span> <span class="n">ArrayList_t</span>

<span class="k">typedef</span> <span class="n">ArrayList_T</span> <span class="n">al_t</span><span class="p">;</span> <span class="c1">// for abbreviation</span>

<span class="n">al_t</span> <span class="o">*</span><span class="nf">list_create</span><span class="p">(</span><span class="kt">int</span> <span class="n">init_size</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">size_t</span> <span class="n">mem</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">elem_t</span><span class="p">)</span> <span class="o">*</span> <span class="n">init_size</span><span class="p">;</span>
    <span class="n">al_t</span> <span class="o">*</span><span class="n">l</span> <span class="o">=</span> <span class="p">(</span><span class="n">al_t</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">al_t</span><span class="p">));</span>
    <span class="k">if</span><span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">l</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span> <span class="o">=</span> <span class="p">(</span><span class="n">elem_t</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">mem</span><span class="p">);</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">mem</span><span class="p">);</span>
    <span class="n">l</span><span class="o">-&gt;</span><span class="n">capa</span> <span class="o">=</span> <span class="n">init_size</span><span class="p">;</span>
    <span class="n">l</span><span class="o">-&gt;</span><span class="n">used</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">l</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">list_destroy</span><span class="p">(</span><span class="n">al_t</span><span class="o">*</span> <span class="n">l</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span><span class="p">){</span>
            <span class="n">free</span><span class="p">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="n">free</span><span class="p">(</span><span class="n">l</span><span class="p">);</span>
        <span class="n">l</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">list_clear</span><span class="p">(</span><span class="n">al_t</span> <span class="o">*</span><span class="n">l</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span><span class="p">){</span>
            <span class="n">memset</span><span class="p">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">elem_t</span><span class="p">)</span> <span class="o">*</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">capa</span><span class="p">);</span>
            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">insert_list_element</span><span class="p">(</span><span class="n">al_t</span> <span class="o">*</span><span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">loc</span><span class="p">,</span> <span class="n">elem_t</span> <span class="n">val</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">loc</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">loc</span> <span class="o">&gt;=</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">capa</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">is_list_full</span><span class="p">(</span><span class="n">l</span><span class="p">)){</span>
            <span class="n">ret</span> <span class="o">=</span> <span class="n">resize_list</span><span class="p">(</span><span class="n">l</span><span class="p">);</span>
            <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// fails on resizing</span>
                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="c1">// say we have 10 elements and add at loc=3 with number n</span>
        <span class="c1">// original : 0 1 2 3 4 5 6 7 8 9</span>
        <span class="c1">// new one  : 0 1 2 n 3 4 5 6 7 8 9 10</span>
        <span class="c1">// loc idx  : 0 1 2 3 4 5 6 7 8 9 10 11</span>
        <span class="n">memcpy</span><span class="p">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span> <span class="o">+</span> <span class="n">loc</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span> <span class="o">+</span> <span class="n">loc</span><span class="p">,</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">used</span> <span class="o">-</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">used</span><span class="p">);</span>
        <span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span><span class="p">[</span><span class="n">loc</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
        <span class="n">l</span><span class="o">-&gt;</span><span class="n">used</span><span class="o">++</span><span class="p">;</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">append_list</span><span class="p">(</span><span class="n">al_t</span> <span class="o">*</span><span class="n">l</span><span class="p">,</span> <span class="n">elem_t</span> <span class="n">val</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">insert_list_element</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">used</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">remove_list_element</span><span class="p">(</span><span class="n">al_t</span> <span class="o">*</span><span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">loc</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">loc</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">loc</span> <span class="o">&gt;=</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">capa</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">is_list_full</span><span class="p">(</span><span class="n">l</span><span class="p">)){</span>
            <span class="n">ret</span> <span class="o">=</span> <span class="n">resize_list</span><span class="p">(</span><span class="n">l</span><span class="p">);</span>
            <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// fails on resizing</span>
                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="c1">// say we have 10 elements and remove element at loc=3</span>
        <span class="c1">// original : 0 1 2 3 4 5 6 7 8 9</span>
        <span class="c1">// new one  : 0 1 2 4 5 6 7 8 9 10</span>
        <span class="c1">// loc idx  : 0 1 2 3 4 5 6 7 8 9 10 11</span>
        <span class="n">memcpy</span><span class="p">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span> <span class="o">+</span> <span class="n">loc</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">,</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span> <span class="o">+</span> <span class="n">loc</span><span class="p">,</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">used</span> <span class="o">-</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">used</span><span class="p">);</span>
        <span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span><span class="p">[</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">used</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">l</span><span class="o">-&gt;</span><span class="n">used</span><span class="o">--</span><span class="p">;</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="n">i</span>
<span class="kt">int</span> <span class="nf">num_list_element</span><span class="p">(</span><span class="n">al_t</span> <span class="o">*</span><span class="n">l</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="p">){</span>
        <span class="k">return</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">used</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="n">elem_t</span> <span class="nf">get_list_element_at</span><span class="p">(</span><span class="n">al_t</span> <span class="o">*</span><span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">loc</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">ret</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">loc</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">loc</span> <span class="o">&gt;=</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">used</span><span class="p">){</span>
         <span class="o">*</span><span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span>
         <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span><span class="p">){</span>
           <span class="o">*</span><span class="n">ret</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
           <span class="k">return</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span><span class="p">[</span><span class="n">loc</span><span class="p">];</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
           <span class="o">*</span><span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
           <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="o">*</span><span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">get_list_capacity</span><span class="p">(</span><span class="n">al_t</span> <span class="o">*</span><span class="n">l</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">capa</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="n">bool</span> <span class="nf">is_list_full</span><span class="p">(</span><span class="n">al_t</span> <span class="o">*</span><span class="n">l</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">capa</span> <span class="o">==</span> <span class="n">l</span><span class="o">-&gt;</span><span class="n">used</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">resize_list</span><span class="p">(</span><span class="n">al_t</span> <span class="o">*</span><span class="n">l</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">size_t</span> <span class="n">newsz</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">capa</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// double the size</span>
    <span class="n">elem_t</span> <span class="o">*</span><span class="n">tmp</span> <span class="o">=</span> <span class="p">(</span><span class="n">elem_t</span> <span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="n">newsz</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">elem_t</span><span class="p">));</span>
    <span class="k">if</span><span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">tmp</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">free</span><span class="p">(</span><span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">l</span><span class="o">-&gt;</span><span class="n">elements</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
    <span class="n">l</span><span class="o">-&gt;</span><span class="n">capa</span> <span class="o">=</span> <span class="n">newsz</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>


</code></pre></div></div>

<p>Python의 경우에는 직접 구현 없이 이미 내장된 리스트를 사용하면 된다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">L</span> <span class="o">=</span> <span class="p">[]</span>
<span class="c1"># see details at https://www.w3schools.com/python/python_lists.asp
</span></code></pre></div></div>

<hr />

<p>리스트를 이용하면 다양한 데이터를 담을 수 있다.</p>

<p>위의 예제에서는 단순하게 숫자 정보만 담았지만 리스트의 원소를 무엇으로 하느냐에 따라 다양한 것을 담을 수 있다</p>

<p>가령 학생의 성적을 담는 것이라면 이전에 정리한 2차원 배열과 같은 방법을 통해 컴퓨 인식하는 방법으로 구현 할 수 있지만</p>

<p><em>인간이 생각하는 방식</em> 으로 구현한다면 <em>구조체</em> 를 원소로 하는 배열 혹은 리스트를 통해 사용가능 하겟다.</p>

<p>아래에 대략적으로 틀만 코딩하면 다음과 같다.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">student_s</span>
<span class="p">{</span>
   <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">30</span><span class="p">];</span> <span class="c1">// 나이</span>
   <span class="kt">int</span> <span class="n">math</span><span class="p">;</span> <span class="c1">// 수학성적</span>
   <span class="kt">int</span> <span class="n">phys</span><span class="p">;</span> <span class="c1">// 물리성적</span>
   <span class="kt">int</span> <span class="n">chem</span><span class="p">;</span> <span class="c1">// 화학성적</span>
   <span class="kt">int</span> <span class="n">biol</span><span class="p">;</span> <span class="c1">// 생물성적</span>
<span class="p">}</span><span class="n">student_t</span><span class="p">;</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">student_list_s</span>
<span class="p">{</span>
    <span class="n">student_t</span> <span class="o">**</span><span class="n">elements</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">capa</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">used</span><span class="p">;</span>
<span class="p">}</span><span class="n">student_list_t</span><span class="p">;</span>

<span class="c1">// initialize list</span>

<span class="n">student_list_t</span> <span class="o">*</span><span class="n">student_list</span> <span class="o">=</span> <span class="p">(</span><span class="n">student_list_t</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">student_list_t</span><span class="p">));</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">num_students</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="n">student_list</span><span class="o">-&gt;</span><span class="n">elements</span> <span class="o">=</span> <span class="p">(</span><span class="n">student_t</span> <span class="o">**</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">student_t</span> <span class="o">*</span><span class="p">)</span> <span class="o">*</span> <span class="n">num_students</span><span class="p">);</span>
<span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_students</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="n">student_list</span><span class="o">-&gt;</span><span class="n">elements</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">student_t</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">student_t</span><span class="p">));</span>
    <span class="n">menset</span><span class="p">(</span><span class="n">student_list</span><span class="o">-&gt;</span><span class="n">lements</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">student_t</span><span class="p">));</span>
<span class="p">}</span>

<span class="c1">// fill data in list</span>

<span class="c1">// Access 10-th student and that person's score</span>
<span class="c1">// student_t *student = get_list_element_at(student_list, 9);</span>
<span class="n">student_t</span> <span class="o">*</span><span class="n">student</span> <span class="o">=</span> <span class="n">student_list</span><span class="o">-&gt;</span><span class="n">elements</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">math</span> <span class="o">=</span> <span class="n">student</span><span class="o">-&gt;</span><span class="n">math</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">phys</span> <span class="o">=</span> <span class="n">student</span><span class="o">-&gt;</span><span class="n">phys</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">chem</span> <span class="o">=</span> <span class="n">student</span><span class="o">-&gt;</span><span class="n">chem</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">biol</span> <span class="o">=</span> <span class="n">student</span><span class="o">-&gt;</span><span class="n">biol</span><span class="p">;</span>

<span class="c1">// do something with information above</span>

<span class="c1">// now destroy list</span>
<span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_students</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="n">free</span><span class="p">(</span><span class="n">student_list</span><span class="o">-&gt;</span><span class="n">elements</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
<span class="p">}</span>
<span class="n">free</span><span class="p">(</span><span class="n">student_list</span><span class="o">-&gt;</span><span class="n">elements</span><span class="p">);</span>
<span class="n">free</span><span class="p">(</span><span class="n">student_list</span><span class="p">);</span>

</code></pre></div></div>

<p>다음 정리할 내용은 배열을 이용 않고 논리적인 순서만 유지된 채로 물리적 순서는 다른 리스트를 구현해 볼까 한다.</p>

:ET